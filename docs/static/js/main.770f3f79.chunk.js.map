{"version":3,"sources":["components/SortElement/SortElement.jsx","components/SortingArea/SortingArea.jsx","components/SortAlgorithms.jsx","components/SortingApp/SortingApp.jsx","App.js","serviceWorker.js","index.js"],"names":["SortElement","props","style","height","backgroundColor","comparing","width","margin","SortingArea","elements","values","map","value","i","key","className","bubbleSort","arr","a","this","setState","sorting","length","j","sleep","swap","sorted","selectionSort","minIndex","insertionSort","el","b","temp","mergeSort","doMergeSort","merge","left","right","result","lLen","rLen","l","r","push","concat","slice","depth","len","mid","Math","floor","res","sortHistory","outerDepth","nums","WAIT_TIME","final","quickSort","partition","start","end","pivotValue","pivotIndex","partitionIndex","call","time","Promise","resolve","setTimeout","SortingApp","randomRange","random","state","Array","fill","x","id","sort","handleSortChange","e","target","handleShuffle","handleSort","apply","disabled","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.770f3f79.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function SortElement(props) {\n  return (\n    <div\n      style={{\n        height: props.height,\n        backgroundColor: props.comparing ? \"lightpink\" : \"lightgreen\",\n        width: props.width,\n        margin: \"0px 1px\"\n      }}\n    ></div>\n  );\n}\n","import React from \"react\";\nimport SortElement from \"../SortElement/SortElement\";\n\nexport default function SortingArea(props) {\n  const elements = props.values.map((value, i) => {\n    return (\n      <SortElement\n        height={value.height}\n        key={i}\n        width={5}\n        comparing={value.comparing}\n      />\n    );\n  });\n\n  return <div className=\"sorting-area\">{elements}</div>;\n}\n","const WAIT_TIME = 0;\n\nasync function bubbleSort(arr) {\n  this.setState({ sorting: true });\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - i - 1; j++) {\n      await sleep(WAIT_TIME);\n      arr[j].comparing = true;\n      arr[j + 1].comparing = true;\n      this.setState({ values: arr });\n      if (arr[j].height > arr[j + 1].height) {\n        arr = swap(arr, j, j + 1);\n      }\n      await sleep(WAIT_TIME);\n      arr[j].comparing = false;\n      arr[j + 1].comparing = false;\n      this.setState({ values: arr });\n    }\n  }\n  this.setState({ sorted: true, sorting: false });\n}\n\nasync function selectionSort(arr) {\n  this.setState({ sorting: true });\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    let minIndex = i;\n    for (let j = i; j < length; j++) {\n      arr[i].comparing = true;\n      arr[j].comparing = true;\n      this.setState({ values: arr });\n      if (arr[minIndex].height > arr[j].height) {\n        arr[minIndex].comparing = false;\n        minIndex = j;\n      }\n      await sleep(WAIT_TIME);\n      arr[j].comparing = false;\n      arr[i].comparing = false;\n      this.setState({ values: arr });\n    }\n    arr = swap(arr, minIndex, i);\n    arr[minIndex].comparing = false;\n    arr[i].comparing = false;\n    this.setState({ values: arr });\n  }\n  this.setState({ sorted: true, sorting: false });\n}\n\nasync function insertionSort(arr) {\n  this.setState({ sorting: true });\n  const length = arr.length;\n  for (let i = 1; i < length; i++) {\n    let el = arr[i];\n    let j = i;\n    while (j > 0 && arr[j - 1].height > el.height) {\n      arr[i].comparing = true;\n      arr[j].comparing = true;\n      arr[j - 1].comparing = true;\n      this.setState({ values: arr });\n      await sleep(WAIT_TIME);\n      arr[j - 1].comparing = false;\n      arr[j].comparing = false;\n      arr[i].comparing = false;\n      arr[j] = arr[j - 1];\n      j--;\n    }\n    arr[j] = el;\n    this.setState({ values: arr });\n  }\n  this.setState({ sorted: true, sorting: false });\n}\n\nfunction swap(arr, a, b) {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n  return arr;\n}\n\nasync function mergeSort(arr) {\n  let sortHistory = [];\n  let outerDepth = 1;\n  let sorted = false;\n  this.setState({ sorting: true, sorted: false });\n  while (!sorted) {\n    if (sortHistory.length > this.nums) sorted = true;\n    outerDepth++;\n    await sleep(WAIT_TIME + 1000);\n    const final = doMergeSort(arr, outerDepth + 1);\n    this.setState({ values: final });\n  }\n  this.setState({ sorting: false, sorted: true });\n\n  function doMergeSort(arr, depth) {\n    const len = arr.length;\n    if (len <= 1) return arr;\n    depth--;\n    if (depth < 1) {\n      return arr;\n    }\n    const mid = Math.floor(len / 2);\n    let left = arr.slice(0, mid);\n    let right = arr.slice(mid);\n    const res = merge(doMergeSort(left, depth), doMergeSort(right, depth));\n    sortHistory.push(res);\n    return res;\n  }\n\n  function merge(left, right) {\n    let result = [];\n    let lLen = left.length;\n    let rLen = right.length;\n    let l = 0,\n      r = 0;\n    while (l < lLen && r < rLen) {\n      // await sleep(WAIT_TIME);\n      if (left[l].height < right[r].height) result.push(left[l++]);\n      else result.push(right[r++]);\n    }\n    return result.concat(left.slice(l)).concat(right.slice(r));\n  }\n  //\n}\n\nasync function quickSort(arr, left, right) {\n  const partition = async (arr, start, end) => {\n    const pivotValue = arr[end];\n    let pivotIndex = start;\n\n    for (let i = start; i < end; i++) {\n      arr[i].comparing = true;\n      arr[pivotIndex].comparing = true;\n      this.setState({ values: arr });\n      await sleep(WAIT_TIME);\n      arr[i].comparing = false;\n      arr[pivotIndex].comparing = false;\n      if (arr[i].height < pivotValue.height) {\n        swap(arr, i, pivotIndex);\n        pivotIndex++;\n      }\n    }\n    swap(arr, right, pivotIndex);\n    return pivotIndex;\n  };\n\n  if (left < right) {\n    const partitionIndex = await partition(arr, left, right);\n    quickSort.call(this, arr, left, partitionIndex - 1);\n    quickSort.call(this, arr, partitionIndex + 1, right);\n  }\n  this.setState({ values: arr });\n  return arr;\n}\n\nfunction sleep(time) {\n  return new Promise(resolve => {\n    setTimeout(resolve, time);\n  });\n}\n\nexport { bubbleSort, selectionSort, insertionSort, mergeSort, quickSort };\n","import React, { Component } from \"react\";\nimport SortingArea from \"../SortingArea/SortingArea\";\nimport {\n  bubbleSort,\n  selectionSort,\n  insertionSort,\n  mergeSort,\n  quickSort\n} from \"../SortAlgorithms\";\n\nclass SortingApp extends Component {\n  randomRange = () => {\n    return Math.floor(Math.random() * (250 - 10 + 1) + 10);\n  };\n\n  nums = 100;\n\n  state = {\n    values: Array(this.nums)\n      .fill(1)\n      .map((x, i) => {\n        return { height: this.randomRange(), id: i, comparing: false };\n      }),\n    sort: \"4\",\n    sorted: false,\n    sorting: false\n  };\n\n  render() {\n    return (\n      <div>\n        <SortingArea {...this.state} />\n        <div className=\"sort-actions\">\n          <select\n            disabled={this.state.sorting}\n            onChange={this.handleSortChange}\n            value={this.state.sort}\n          >\n            <option value=\"0\">Bubble Sort</option>\n            <option value=\"1\">Selection Sort</option>\n            <option value=\"2\">Insertion Sort</option>\n            <option value=\"3\">Merge Sort</option>\n            <option value=\"4\">Quick Sort</option>\n          </select>\n          <button disabled={this.state.sorting} onClick={this.handleSort}>\n            Sort\n          </button>\n          <button disabled={this.state.sorting} onClick={this.handleShuffle}>\n            Shuffle\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  handleSortChange = e => {\n    this.setState({ sort: e.target.value });\n    if (this.state.sorted) this.handleShuffle();\n  };\n\n  handleSort = () => {\n    switch (this.state.sort) {\n      case \"0\":\n        bubbleSort.apply(this, [this.state.values]);\n        break;\n      case \"1\":\n        selectionSort.apply(this, [this.state.values]);\n        break;\n      case \"2\":\n        insertionSort.apply(this, [this.state.values]);\n        break;\n      case \"3\":\n        mergeSort.apply(this, [this.state.values]);\n        break;\n      case \"4\":\n        quickSort.apply(this, [\n          this.state.values,\n          0,\n          this.state.values.length - 1\n        ]);\n        break;\n      default:\n        this.handleShuffle();\n    }\n  };\n\n  handleShuffle = () => {\n    const arr = this.state.values.map(x => {\n      x.height = this.randomRange();\n      x.comparing = false;\n      return x;\n    });\n    this.setState({ values: arr, sorted: false });\n  };\n}\n\nexport default SortingApp;\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingApp from \"./components/SortingApp/SortingApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}